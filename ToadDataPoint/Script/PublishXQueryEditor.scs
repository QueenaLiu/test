//-------------------------------------------------------------------------------------
//Function Name : PublishXQueryEditor
//Author        : Queena Liu
//Create Date   : March 27, 2013
//Last Modify   : 
//Description   : Main Function, publish data from view details to TIC
//Parameter     : nID   ->  data ID in Excel
//Return        : boolean
//-------------------------------------------------------------------------------------

//USEUNIT InitialEnv
//USEUNIT Common
//USEUNIT TDPCommon
//USEUNIT Variable
//USEUNIT Publish

var s_strFunctionPoint  = 'Publish';
var s_strTestConfig     = 'Publish.xls'


function PublishXQueryEditor(nID)
{
    var strConfigFile = g_strProjectTestConfig + "\\" + s_strFunctionPoint + "\\" + s_strTestConfig;
    var strSheetName  = 'PublishXQueryEditor';
    var ScriptFile, ScriptName;
    
    //Data in Excel
    var ticConnName, srcConnName;
    var arrSrcConnName;

    //Control variant
    var objTICConn, objSrcConn, publishObject;
    var objTabStrip, objDataGridCtrl
    
    //other variant
    var objDict = new ActiveXObject('Scripting.Dictionary');
    var bReturn = true;
    
    try
    {
        BeginLogFolder(arguments);
        
        InitialEnvMain();
        ActivateMainWinForm();
        Delay(1000);
        CloseAllEditor();
    
        //Get configuration from Excel
        if (GetDataFromExcelByID(strConfigFile, strSheetName, nID, objDict))
        {
            ticConnName       =  objDict["Item"]("TICConnName");
            ScriptName        =  objDict["Item"]("ScriptName");
            srcConnName       =  objDict["Item"]("SrcConnName");
            ScriptFile        =  g_strProjectTestData + "\\" + s_strFunctionPoint + "\\" + ScriptName;
        }
         else
        {
            throw new Error('Fail to read Excel data.');
        }
        
        //Check TIC connection exists
        objTICConn = GetConnection(ticConnName);
        if (! objTICConn["Exists"])
        {
            throw new Error('TIC connection "'+ticConnName+'" does not exist!');
        }
        else
        {
            Reconnect(ticConnName);
            Delay(3000);
        }
        
        //Get
        arrSrcConnName  = srcConnName["split"]('|');
        for(i in arrSrcConnName)
        {
            objSrcConn = GetConnection(arrSrcConnName[i]);
            if (! objTICConn["Exists"])
            {
                throw new Error('Source connection "'+arrSrcConnName[i]+'" does not exist!');
            }
            else
            {
                Reconnect(arrSrcConnName[i]);
                Delay(3000);
            }
        }
        
        // Open file
        //Aliases["TDP_toad"]["frmMainForm"]["BarDockControl"]["DockedBarControl"]["ClickItem"]("File|Open File...");
        Aliases["TDP_toad"]["frmMainForm"]["BarDockControl"]["DockedBarControl"]["ClickItem"]("File");
        SendKeys(['[Down]', '[Enter]'], [6, 1]);
        WaitingForObjectWithTime(Aliases["TDP_toad"]["UIAObject"]("Open*"), 5);
        Aliases["TDP_toad"]["UIAObject"]("Open*")["UIAObject"]("File_name_")
            ["UIAObject"]("File_name_")["UIAObject"]("File_name_")["SetText"](ScriptFile);
        ButtonClickWithDelay(Aliases["TDP_toad"]["UIAObject"]("Open*")["UIAObject"]("Open"), 3);
        
        //Aliases["TDP_toad"]["frmMainForm"]["MdiClient"]["frmMdiDocEditor"]["EditorForm"]["ToolWindowContainer"]["toolEditor"]["editorControl"]["syntaxEditor"]
        var ctrlEditor = Aliases["TDP_toad"]["frmMainForm"]["MdiClient"]["frmMdiDocEditor"]["EditorForm"]["ToolWindowContainer"]
                            ["toolEditor"]["editorControl"];
        ctrlEditor["ClickR"]();
        Delay(2000);
        SendKeys(['[Down]', '[Enter]'], [10, 1]);
        Delay(3000); 
             
        bReturn = Publish["Publish"](nID, strSheetName);
        if (bReturn)
            Log["Message"]('Publish success!');
        else
            throw new Error('Publish failed!');
        Log["Message"]('============================================');
        
    }
    catch(e)
    {
        bReturn = false;
        Log["Error"](e["description"]);
    }
    finally
    {
        EndLogFolder();
    }
    return bReturn;
}

