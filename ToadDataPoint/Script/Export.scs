///////////////////////////////////////////////////////////////////////////////////////
//
//  Unit Name     : Export
//  Author        : Roy T.Burns(Royburns.Peng@software.dell.com)
//  Create Date   : Oct 10, 2013
//  Last Modify   : 
//  Description   : Test Step -- Export Data.
//
//    All rights reserved by TDP Team.
//
///////////////////////////////////////////////////////////////////////////////////////

//USEUNIT InitialEnv
//USEUNIT ExcelOperator
//USEUNIT Variable
//USEUNIT Common
//USEUNIT TDPCommon
//USEUNIT LaunchTDP
//USEUNIT CreateSybaseASEConnection

var s_strFunctionPoint  = 'Export';
var s_strTestConfig     = 'Export.xls'

//-------------------------------------------------------------------------------------
//Function Name : Export
//Author        : Hugo He
//Create Date   : July 25, 2013
//Last Modify   : 
//Description   : Main Function, export data
//Parameter     : nID           --> data id in Excel
//                strSheetName  --> Excel sheet name
//                exportWay     --> 'Menubar' or 'ObjectGrid'
//Return        : boolean
//-------------------------------------------------------------------------------------
function Export(nID, strSheetName, exportWay)
{ 
    var strConfigFile       = g_strProjectTestConfig + "\\" + s_strFunctionPoint + "\\" + s_strTestConfig;
    var objDict             = new ActiveXObject("Scripting.Dictionary");
    var bReturn             = true;
    //Excel data variant
    var connName, exportType, sourceType, databaseName, schema, objectName, queryOrFile;
    var outputFormat, columnHeader, nFixedWidth, fileName, overwrite, saveTemplate, templateName;
    //Controls
    var conn, menuBar, exportWizard, objType, templateNameBox, ckHeadRow, tbxTableName, tbxFixedWidth, tbxSheetName;
    
    try
    {
        BeginLogFolder(arguments);
        //Get configuration from Excel
        if (GetDataFromExcelByID(strConfigFile, strSheetName, nID, objDict))
        {
            connName      = objDict["Item"]("ConnName");
            exportType    = objDict["Item"]("ExportType");
            sourceType    = objDict["Item"]("SourceType");
            databaseName  = objDict["Item"]("DatabaseName");
            schema        = objDict["Item"]("Schema");
            objectName    = objDict["Item"]("ObjectName");
            queryOrFile   = objDict["Item"]("QueryOrFile");
            outputFormat  = objDict["Item"]("OutputFormat");
            columnHeader  = objDict["Item"]("ColumnHeader");
            fileName      = objDict["Item"]("FileName");
            overwrite     = objDict["Item"]("Overwrite");
            nFixedWidth   = objDict["Item"]("FixedWidthSize");
            saveTemplate  = objDict["Item"]("SaveTemplate");
            templateName  = objDict["Item"]("TemplateName");
        
            fileName = aqString["Replace"](fileName, '/', '\\');
        
            //Foucs on source object
            switch (aqString["ToUpper"](sourceType))
            {
                case 'ORACLE':
                case 'SQLSERVER':
                    objectName = objectName;
                    break;
                case 'SYBASEASE':
                    break;
                default:
                    throw new Error('Does not support "' + sourceType + '" data source.');
            }
        }
        else
        {
            throw new Error('Fail to read Excel data.');
        }
    
        if (exportWay == 'Menubar')
        {
        //Check and enable connection
            conn = GetConnection(connName);
            if (! conn["Exists"]){
                //if the source type is SybaseASE, SybaseASE connection would be created. Otherwise, error would pop up.
                if(sourceType == 'SybaseASE')
                {
                    CreateSybaseASEConnection["CreateSybaseASEConnection"](1);
                }else
                {
                    throw new Error('Connection does not exist!');
                }
            }
            else{
                Reconnect(connName);
                Delay(5000);
            }
    
            //Launch Export Wizard
            menuBar = Aliases["TDP_toad"]["frmMainForm"]["BarDockControl"]["DockedBarControl"];
            //menuBar["ClickItem"]("Tools|Export|Export Wizard*");
            menuBar["ClickItem"]('Tools');
            SendKeys(['[Down]', '[Enter]'], [7,2]);

            //Click Next
            ButtonClickWithDelay(Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["pnlButtons"]["btnNext"], 3);
    
            //Add Export objects
            ButtonClickWithDelay(Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgAddExport"]["pnlExportObjectsList"]["sbtnAddFile"], 3);
    
            //Select objects
            objType = Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgSelectObjects"]["gctrlExportCategory"]["FindChild"]("Caption", exportType, 1);
            if (objType["Exists"])
            {
                objType["Click"]();
                Log["Message"]('Selected '+exportType);
            }
            else{
                throw new Error("There is not "+exportType+" object type.");
            }
    
            switch(exportType)
            {
                case 'Tables':
                    Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgSelectObjects"]["cbxParent"]["Keys"](schema+'[Enter]');
                    Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgSelectObjects"]["clbChildren"]["CheckItem"](objectName, true);
                    break;
                case 'Query File':
                    Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgSelectObjects"]["btneSQLQuery"]["btnFileInformation"]["Click"]();
                    Aliases["TDP_toad"]["dlgOpenFile"]["cbxFilename"]["cbxFilename"]["cbxFilename"]["SetText"](g_strProjectTestData+'\\'+s_strFunctionPoint+'\\'+queryOrFile);
                    Aliases["TDP_toad"]["dlgOpenFile"]["btnOpen"]["ClickButton"]();
                    break;
                case 'Query':
                    Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgSelectObjects"]["rtbTextList"]["SetText"](queryOrFile);
                    break;
                case 'Text list':
                    Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgSelectObjects"]["rtbTextList"]["SetText"](queryOrFile);
                    break;
                default :
                    Log["Error"]("There is not "+exportType+" object type.");
                    return false;
            }
            Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["pnlButtons"]["btnNext"]["Click"]();
        }
    
        //Select output format
        Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgFileFormat"]["WaitProperty"]("Exists", true, 30000);
        Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgFileFormat"]["gctrlFileFormat"]["cbxFileFormat"]["Keys"](outputFormat);
        ckHeadRow = Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgFileFormat"]["gctrlFileFormat"]["ceHeaderRow"];
        if (columnHeader != undefined && columnHeader != null)
        {
            if(ckHeadRow["Enabled"])
                ckHeadRow["Checked"] = columnHeader;
        }
        
        tbxFixedWidth = Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgFileFormat"]["gctrlFileFormat"]["spFixedWidthSize"]["tbxMaskBox"];
        if (tbxFixedWidth["Exists"] && tbxFixedWidth["Enabled"])
        {
            tbxFixedWidth["SetText"](nFixedWidth);
        }
        
        if(outputFormat == 'SQL Script' && sourceType == 'SybaseASE')
        {
            cbxFullyQualify = Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgFileFormat"]["gctrlScriptOptions"]["ceFullyQualify"];
            
            if(cbxFullyQualify["Exists"] && cbxFullyQualify["Enabled"])
            {
                cbxFullyQualify["wState"] = 1
            }
        }
        
        tbxTableName = Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgFileFormat"]["gctrlScriptOptions"]["tbxTableName"]["tbxMaskBox"];
        if(tbxTableName["Exists"] && tbxTableName["Enabled"])
        {
            switch (sourceType)
            {
                case 'ORACLE':
                    tbxTableName["SetText"](objectName+'_NEW');
                    break;
                case 'SQLSERVER':
                    tbxTableName["SetText"](aqString["SubString"](objectName, aqString["Find"](objectName, '.')+1, 1000)+'_NEW');
                    break;
                case 'SybaseASE':
                    objectName = objectName["split"]('.')[1] + '_NEW';
                    tbxTableName["SetText"](objectName);
                    break;
            }
        }
        //Don't check system resources
        Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgFileFormat"]["gctrlFileFormat"]["ceResources"]["Checked"] = false;
    
        Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["pnlButtons"]["btnNext"]["Click"]();
    
        Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["pnlButtons"]["btnNext"]["Click"]();
        
        //Select output options
        switch (outputFormat)
        {
            case 'Comma Separated Values':
            case 'Fixed Column Width':
            case 'SQL Script':
                Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgFileLocation"]["btneFolderFileName"]["tbxMaskBox"]["SetText"](fileName);
                Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgFileLocation"]["pnlOutput"]["gctrlExistingFile"]["ceFileOverwrite"]["Checked"] = overwrite;
                Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgFileLocation"]["pnlOutput"]["gctrlExistingFile"]["ceAddSuffix"]["Checked"] = false;
                break;
            case 'Excel':
                Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgExcelOption"]["pnlExcelExportUserControl"]
                    ["pnlDestination"]["gctrlExcelDestination"]["btneExcelFolderFileName"]["tbxMaskBox"]["SetText"](fileName);
                Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgExcelOption"]["pnlExcelExportUserControl"]
                    ["pnlOptions"]["pnlOption"]["gctrlOptions"]["cbxHeadeRow"]["Checked"] = columnHeader;
                Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgExcelOption"]["pnlExcelExportUserControl"]
                    ["pnlOptions"]["pnlOption"]["pnlOutputExcel"]["gctrlExistingFile"]["ceFileOverwrite"]["Checked"] = overwrite;
                Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgExcelOption"]["pnlExcelExportUserControl"]
                    ["pnlOptions"]["pnlOption"]["pnlOutputExcel"]["gctrlExistingFile"]["WinFormsObject"]("ceAddSuffix")["Checked"] = false;
                tbxSheetName = Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgExcelOption"]["pnlExcelExportUserControl"]
                                  ["pnlWorksheet"]["pnlWorksheetOptions"]["txtWorksheetName"]["tbxMaskBox"];
                if(tbxSheetName["Exists"] && tbxSheetName["Enabled"])
                {
                    tbxSheetName["SetText"](objectName);
                }
                break;
            default:
                throw new Error('The output format "'+outputFormat+'" does not supported.');
        }
        Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["pnlButtons"]["btnNext"]["Click"]();
    
        //Save Template?
        Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["pnlButtons"]["btnNext"]["Click"]();
        Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgSaveAsTemplate"]["pnlSaveTemplate"]["ceSave"]["Checked"] = saveTemplate;
        templateNameBox = Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["wpgSaveAsTemplate"]["pnlSaveTemplate"]["btneSaveTemplate"]["tbxMaskBox"];
        if (saveTemplate == true)
        {
            if (templateNameBox["Enabled"])
            {
                templateNameBox["Keys"](templateName);
            }
            else
            {
                throw new Error('TextBox for template name is disabled.');
            }
        }
    
        if (Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["pnlButtons"]["btnNext"]["Enabled"])
        {
            Aliases["TDP_toad"]["ExportWizard"]["wizardExport"]["pnlButtons"]["btnNext"]["Click"]();
        }
        else
        {
            throw new Error('Finish button is disabled.');
        }
    
        //Check export result
        Aliases["TDP_toad"]["frmBaseModal"]["frmConfirmation"]["pnlFinishedControl"]["WaitProperty"]('Exists', true, 15000);
    
        Aliases["TDP_toad"]["frmBaseModal"]["frmConfirmation"]["pnlButton"]["btnOk"]["Click"]();
    }
    catch(e)
    {
        bReturn = false;
        Log["Error"](e["description"]);
        throw e;
    }
    finally
    {
        EndLogFolder();
    }
    return bReturn;
}

//-------------------------------------------------------------------------------------
//Function Name : CheckExportResult
//Author        : Hugo He
//Create Date   : July 25, 2013
//Last Modify   : 
//Description   : Verify the information in export result window
//Parameter     : objectName --> exported object's name
//Return        : boolean
//-------------------------------------------------------------------------------------
function CheckExportResult(objectName)
{
    var bReturn;
    var resultsDataGrid, rowNum;
    
    try
    {
        BeginLogFolder(arguments);
        
        resultsDataGrid = Aliases["TDP_toad"]["frmBaseModal"]["frmConfirmation"]["pnlFinishedControl"]["pnlControlTop"]["grdResult"];
        rowNum = resultsDataGrid["FindRow"]('Description', '*'+objectName+'*');
      	if (rowNum == -1)
      		  rowNum = 0;
        var row = resultsDataGrid["FindChild"]('ControlIndex', rowNum, 2);
        var readRows = row["FindChild"]('Name', '*Read*', 1)["Value"];
        var exportedRows = row["FindChild"]('Name', '*Exported*', 1)["Value"];
        var exportedStatus = row["FindChild"]('Name', '*Status*', 1)["Value"];
        var exportedFile = row["FindChild"]('Name', '*File Name*', 1)["Value"];
        Log["Message"]('For '+objectName+', read rows:'+readRows+', exported rows:'+exportedRows+', status:'+exportedStatus);
        if (readRows==exportedRows && exportedStatus=='Finished'){
            bReturn = true;
        }
        else{
            bReturn = false;
        }
    }
  	catch(e)
  	{
  		  Log["Error"](e["description"]);
  	}
  	finally
  	{
  		  EndLogFolder();
  	}
    return bReturn;
}

